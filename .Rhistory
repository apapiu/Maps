filter(Candidate == candidate, State == "Iowa")
rubio <- inner_join(Votes[,-c(2,3)], rubio, by = "County")
rubio$Income <- rubio$Income/1000
rubio$FractionVotes <- rubio$FractionVotes *100 #normalize a bit
g1 <- qplot(x = Income, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g2 <- qplot(x = Urban, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g3 <- qplot(x = College, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
grid.arrange(g1, g2, g3, nrow =1, ncol = 3)
summary(lm(FractionVotes ~ Urban + Income + College, data = rubio))
candidate = "Ted Cruz"
rubio <- primary %>%
filter(Candidate == candidate, State == "Iowa")
rubio <- inner_join(Votes[,-c(2,3)], rubio, by = "County")
rubio$Income <- rubio$Income/1000
rubio$FractionVotes <- rubio$FractionVotes *100 #normalize a bit
g1 <- qplot(x = Income, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g2 <- qplot(x = Urban, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g3 <- qplot(x = College, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
grid.arrange(g1, g2, g3, nrow =1, ncol = 3)
summary(lm(FractionVotes ~ Urban + Income + College, data = rubio))
source('~/.active-rstudio-document', echo=TRUE)
```{r, out.width = '800px', out.height = '300px'}
candidate = "Ted Cruz"
rubio <- primary %>%
filter(Candidate == candidate, State == "Iowa")
rubio <- inner_join(Votes[,-c(2,3)], rubio, by = "County")
rubio$Income <- rubio$Income/1000
rubio$FractionVotes <- rubio$FractionVotes *100 #normalize a bit
g1 <- qplot(x = Income, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g2 <- qplot(x = Urban, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g3 <- qplot(x = College, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
grid.arrange(g1, g2, g3, nrow =1, ncol = 3)
summary(lm(FractionVotes ~ Urban + Income + College, data = rubio))
```
rubio <- primary %>%
filter(Candidate == candidate, State == "Iowa")
rubio <- inner_join(Votes[,-c(2,3)], rubio, by = "County")
View(rubio)
View(Votes)
g3 <- qplot(x = College, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g3
g1
library(tigris)
library(leaflet)
library(dplyr)
library(acs)
library(ggplot2)
library(plotly)
library(grid)
library(gridExtra)
primary <- read.csv("PrimaryResults.csv", stringsAsFactors = FALSE)
state = "Iowa"
party = "Republican"
Votes <- primary %>%
filter( State == state, Party == party) %>%
group_by(County) %>%
summarize(Candidate = Candidate[which.max(FractionVotes)],
Vote = max(FractionVotes))
head(Votes)
iowa.demographics <- read.csv("https://raw.githubusercontent.com/apapiu/Rplots/master/iowa_counties.csv")
Votes <- inner_join(Votes, iowa.demographics, by = "County")
View(Votes)
str(iowa.demographics)
head(Votes)
str(Votes)
Avg <- Votes %>%
group_by(Candidate) %>%
summarize(mean(Income), mean(Urban), mean (College))
Avg <- Votes %>%
group_by(Candidate) %>%
summarize(mean(MedianIncome), mean(Urban), mean (College))
names(Votes)
names(Votes)[5:9] <- c("Population", "Age", "Income", "Urban")
names(Votes)[5:9] <- c("Population", "Age", "Income","College", "Urban")
str(Votes)
Avg <- Votes %>%
group_by(Candidate) %>%
summarize(mean(Income), mean(Urban), mean (College))
Avg <- Votes %>%
group_by(Candidate) %>%
summarize(mean(Income), mean(Urban), mean (College), mean(Age))
View(Avg)
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate))
ggplotly(qplot(x =  Income, y = Urban, data = Age,
color = Candidate))
ggplotly(qplot(x =  Age, y = Urban, data = Votes,
color = Candidate))
Avg
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate))
```{r}
ggplotly(qplot(x =  Urban, y = Income, data = Votes,
color = Candidate))
```
ggplotly(qplot(x =  Urban, y = Age, data = Votes,
color = Candidate))
ggplotly(qplot(x =  Urban, y = -Age, data = Votes,
color = Candidate))
ggplotly(qplot(x =  Urban, y = Age, data = Votes,
color = Candidate))
g4 <- qplot(x = Age, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
candidate = "Marco Rubio"
rubio <- primary %>%
filter(Candidate == candidate, State == "Iowa")
rubio <- inner_join(Votes[,-c(2,3)], rubio, by = "County")
rubio$Income <- rubio$Income/1000
rubio$FractionVotes <- rubio$FractionVotes *100 #normalize a bit
g1 <- qplot(x = Income, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g2 <- qplot(x = Urban, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g3 <- qplot(x = College, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
g4 <- qplot(x = Age, y = FractionVotes, data = rubio) +
geom_smooth(method='lm',formula=y~x)
grid.arrange(g1, g2, g3, g4, nrow =1, ncol = 2)
grid.arrange(g1, g2, g3, g4, nrow =2, ncol = 2)
summary(lm(FractionVotes ~ Urban + Income + College + Age, data = rubio))
summary(lm(FractionVotes ~ Urban + Income + College, data = rubio))
predixt(lm(FractionVotes ~ Urban + Income + College, data = rubio))
predict(lm(FractionVotes ~ Urban + Income + College, data = rubio))
predict(lm(FractionVotes ~ Urban + Income + College, data = rubio),
newdata = numeric(10), interval = "confidence")
?predict
predict(lm(FractionVotes ~ Urban + Income + College, data = rubio),
newdata=list(hydro=1.0), interval = "prediction")
predict(lm(FractionVotes ~ Urban + Income + College, data = rubio),
newdata=list(hydro=1.0), interval = "prediction")
View(rubio)
lm(FractionVotes ~ Urban + Income + College, data = rubio)
predict(lm(FractionVotes ~ Urban + Income + College, data = rubio),
newdata=rubio, interval = "prediction")
primary <- read.csv("PrimaryResults.csv", stringsAsFactors = FALSE)
library(tigris)
library(leaflet)
library(dplyr)
library(acs)
library(ggplot2)
library(plotly)
library(grid)
library(gridExtra)
state = "Iowa"
party = "Republican"
Votes <- primary %>%
filter( State == state, Party == party) %>%
group_by(County) %>%
summarize(Candidate = Candidate[which.max(FractionVotes)],
Vote = max(FractionVotes))
head(Votes)
iowa.demographics <- read.csv("https://raw.githubusercontent.com/apapiu/Rplots/master/iowa_counties.csv")
Votes <- inner_join(Votes, iowa.demographics, by = "County")
names(Votes)[5:9] <- c("Population", "Age", "Income","College", "Urban")
str(Votes)
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate))
qplot(x =  Income, y = College, data = Votes,
color = Candidate)
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = 1)
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = 1))
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .1))
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .5)
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .3)
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .3) +   scale_fill_manual(values=cbPalette)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .3) +   scale_fill_manual(values=cbPalette)
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate)
grid.arrange(p1, p2, nrow =1)
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = .4)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = .4)
grid.arrange(p1, p2, nrow =1)
names(Votes)
head(Votes)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote)
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = Vote)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote)
grid.arrange(p1, p2, nrow =1)
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = 2*Vote)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = 2*Vote)
grid.arrange(p1, p2, nrow =1)
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = Vote)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote)
grid.arrange(p1, p2, nrow =1)
?grid.arrange
Counties <- counties(state = state) #gives the geospatial files
Merge <- geo_join(Counties, Votes, "NAME", "County")
pal = colorFactor(c("dark red","dark green", "blue"), domain = Merge$Candidate)
popup = paste0(Merge$County, " County")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Candidate), fillOpacity = .7) %>%
addLegend(pal = pal, value = Merge$Candidate,
title = "Winner by County")
pal = colorNumeric("Blues", domain = Merge$Income)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Income), fillOpacity = .7) %>%
addLegend(pal = pal, value = Merge$Income,
title = "Winner by County")
?addLayersControl
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Income), fillOpacity = .7,
group = "Income") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$College), fillOpacity = .7,
group = "College") %>%
addLayersControl(baseGroups(c("Income", "College"))) %>%
addLegend(pal = pal, value = Merge$Income,
title = "Winner by County")
pal = colorNumeric("Blues", domain = Merge$Income)
pal1 = colorNumeric("Blues", domain = Merge$College)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Income), fillOpacity = .7,
group = "Income") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal1(Merge$College), fillOpacity = .7,
group = "College") %>%
addLayersControl(baseGroups = (c("Income", "College"))) %>%
addLegend(pal = pal, value = Merge$Income,
title = "Winner by County")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Income), fillOpacity = .7,
group = "Income") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal1(Merge$College), fillOpacity = .7,
group = "College") %>%
addLayersControl(baseGroups = (c("Income", "College"))) %>%
addLegend(pal = pal, value = Merge$Income, vaue = Merge$College,
title = "Winner by County")
pal = colorNumeric("Blues", domain = Merge$Income)
pal1 = colorNumeric("Blues", domain = Merge$College)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Income), fillOpacity = .7,
group = "Income") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal1(Merge$College), fillOpacity = .7,
group = "College") %>%
addLayersControl(baseGroups = (c("Income", "College"))) %>%
addLegend(pal = pal, value = Merge$Income, value = Merge$College,
title = "Winner by County")
p1 <- qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = Vote)
p2 <- qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote)
grid.arrange(p1, p2, nrow =1)
?grid.arrange
grid.arrange(p1, p2, nrow =1)
p1
qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = Vote) +
ggtitle("Plant growth with\ndifferent treatments")
qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote) +
ggtitle("Counties by Winner, Age, and Urbanization")
ggplotly(qplot(x =  Income, y = College, data = Votes,
color = Candidate, size = Vote) +
ggtitle("Counties by Winner, Education and Income"))
qplot(x =  Urban, y = Age, data = Votes,
color = Candidate, size = Vote) +
ggtitle("Counties by Winner, Age, and Urbanization")
ggplotly(qplot(x =  Income, y = log(College), data = Votes,
color = Candidate, size = Vote) +
ggtitle("Counties by Winner, Education and Income"))
View(primary)
sum(primary$Votes)
sum(primary$Votes[primary$Party == Republican])
sum(primary$Votes[primary$Party == "Republican"])
?readOGR
counties <- readOGR(dsn="/county_shapefiles", layer="cb_2014_us_county_500k")
library(rgdal)
counties <- readOGR(dsn="/county_shapefiles", layer="cb_2014_us_county_500k")
?readOGR
counties <- readOGR(dsn="county_shapefiles", layer="cb_2014_us_county_500k")
counties <- readOGR(dsn="iowa_county_shapefiles", layer="cb_2014_us_county_500k")
Counties <- readOGR(dsn="iowa_county_shapefiles", layer="cb_2014_us_county_500k")
Merge <- geo_join(Counties, Votes, "NAME", "County")
pal = colorFactor(c("dark red","dark green", "blue"), domain = Merge$Candidate)
popup = paste0(Merge$County, " County")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Candidate), fillOpacity = .7) %>%
addLegend(pal = pal, value = Merge$Candidate,
title = "Winner by County")
?geo_join
Merge <- geo_join(Counties, Votes, "NAME", "County", how = "inner")
pal = colorFactor(c("dark red","dark green", "blue"), domain = Merge$Candidate)
popup = paste0(Merge$County, " County")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Candidate), fillOpacity = .7) %>%
addLegend(pal = pal, value = Merge$Candidate,
title = "Winner by County")
counties@data$id <- rownames(counties@data)
counties.points <- fortify(counties, region="id")
library(rgeos)
counties.points <- fortify(counties, region="id")
Merge <- geo_join(Counties, Votes, "NAME", "County")
pal = colorFactor(c("dark red","dark green", "blue"), domain = Merge$Candidate)
popup = paste0(Merge$County, " County")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = Merge, weight = 1, color = "white",
smoothFactor = 0.2, popup = popup,
fillColor = ~pal(Merge$Candidate), fillOpacity = .7) %>%
addLegend(pal = pal, value = Merge$Candidate,
title = "Winner by County")
addLayersControl()
?addLayersControl
library(leaflet)
library(tigris)
library(stringr)
library(dplyr)
library(acs)
state = "NY"
counties = c(5, 47, 61, 81, 85)
tracts <- tracts(state = state,county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
final.df$Italian <- numeric(dim(final.df)[1])
final.df$Italian[final.df$stat == "Italian"] <- 1
final.df$Irish <- numeric(dim(final.df)[1])
final.df$Irish[final.df$stat == "Irish"] <- 1
final.df$Russian <- numeric(dim(final.df)[1])
final.df$Russian[final.df$stat == "Russian"] <- 1
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal1 <- colorFactor(c("transparent", "blue"), NULL)
pal <- colorFactor("Paired", domain = merge$stat)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -74.0059, lat = 40.7127, zoom = 13) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2,
group = "All") %>%
addPolygons(data = merge,
fillColor = ~pal1(Italian), fillOpacity = .6,
color = "white", weight = 0.3, smoothFactor = 0.2,
group = "Italians") %>%
addPolygons(data = merge,
fillColor = ~pal1(Russian), fillOpacity = .6,
color = "white", weight = 0.3, smoothFactor = 0.2,
group = "Russians") %>%
addPolygons(data = merge,
fillColor = ~pal1(Irish), fillOpacity = .6,
color = "white", weight = 0.3, smoothFactor = 0.2,
group = "Irish") %>%
addLayersControl(
baseGroups = c("All", "Italians", "Irish", "Russians"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("Italians", "Irish", "Russians"))
#mapping crime with leaflet
#mapping crime with leaflet
install.packages("RColorBrewer")
install.packages("lubridate")
library(RColorBrewer)
library(leaflet)
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
crimes <- read.csv("train.csv")
save(crimes, file = "crimes.Rdata")
load("crimes.Rdata")
crimes <- crimes %>% mutate(DayOfWeek = factor(DayOfWeek, levels=c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")),
Hour = hour(Dates))
crime.map <- function( categories, n) {
new.crimes <- filter(crimes, Category %in% categories) %>%
droplevels() #you need this to get rid of the original factor lvls.
pal <- colorFactor(brewer.pal(length(unique(new.crimes$Category)), "Set1"),
domain = new.crimes$Category) # without this leaflet messes up colors it seems.
leaflet(new.crimes[1:n,]) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers (lng =  ~X, lat =  ~Y,
color = ~pal(Category),
opacity = .7,
radius  = 1) %>%
addLegend(pal = pal, values = new.crimes$Category)
}
crime.map(c( "MISSING PERSON", "PROSTITUTION"), n = 10000)
table(crimes$Category)
length(unique(crimes$date))
#plotting prostitution by day and time:
#all the days:
crimes$date <- sapply(as.character(crimes$Dates),
function(x){strsplit(x, split = " ", fixed = TRUE,)[[1]][1]})
x <- split(crimes, crimes$DayOfWeek)
for (i in 1:7) print(length(unique(x[[i]]$date)))
#ok so it seems all the days are equally ikely. Good.
# now let's do timeseries:
crimes <- read.csv("train.csv")
crimes <- crimes %>% mutate(DayOfWeek = factor(DayOfWeek, levels=c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")),
Hour = hour(Dates))
cat = "ASSAULT"
dat = filter(crimes, Category == cat)
temp <- dat %>%
group_by(DayOfWeek, Hour) %>%
tally()
temp$dayhour <- paste(temp$Hour, substr(temp$DayOfWeek, 1, 3))
temp$midnight <- as.factor(ifelse(temp$Hour == 0, "1", "0"))
p1 <- plot_ly(data = temp, y = n, x = dayhour, type = "bar", name = "unemployment") %>%
layout(xaxis =list(title =  " ", tickangle = 45,
tickfont = list(size = 11)),
yaxis = list(title = "Assault"))
cat = "VANDALISM"
dat = filter(crimes, Category == cat)
temp <- dat %>%
group_by(DayOfWeek, Hour) %>%
tally()
temp$dayhour <- paste(temp$Hour, substr(temp$DayOfWeek, 1, 3))
temp$midnight <- as.factor(ifelse(temp$Hour == 0, "1", "0"))
p2 <- plot_ly(data = temp, y = n, x = dayhour, type = "bar") %>%
layout(xaxis = list(title =  " ", tickangle = 45,
tickfont = list(size = 11)),
yaxis = list(title = "Vandalism"))
cat = "DRUNKENNESS"
dat = filter(crimes, Category == cat)
temp <- dat %>%
group_by(DayOfWeek, Hour) %>%
tally()
temp$dayhour <- paste(temp$Hour, substr(temp$DayOfWeek, 1, 3))
temp$midnight <- as.factor(ifelse(temp$Hour == 0, "1", "0"))
p3 <- plot_ly(data = temp, y = n, x = dayhour, type = "bar", showlegend = F) %>%
layout(xaxis = list(title =  " ", tickangle = 45,
tickfont = list(size = 11)),
yaxis = list(title = "Drunkenness"))
temp <- read.csv("https://raw.githubusercontent.com/apapiu/Rplots/master/iowa_counties.csv")
