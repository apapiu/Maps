anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.985428, lat = 40.748817, zoom = 11) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*", check = TRUE)
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.985428, lat = 40.748817, zoom = 11) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*", check = TRUE)
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.985428, lat = 40.748817, zoom = 11) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry(c("NY"), c(5))
map.ancestry("NY", c(5))
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.985428, lat = 40.748817, zoom = 11) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("NY", c(5))
?tracts
map.ancestry("CA", "*")
state <- c("CA")
tracts <- tracts(state = state, county = "*", cb=TRUE)
geo.make
?geo.make
map.ancestry("NY", "Queens")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -73.985428, lat = 40.748817, zoom = 11) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("NY", "Queens")
map.ancestry("IL", "Cook")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.01,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.1,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("IL", "Cook")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.2,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("IL", "Cook")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("IL", "Cook")
map.ancestry("CA", "Los Angeles")
map.ancestry("CA", "San Francisco")
map.ancestry("MO", "St. Louis")
map.ancestry("MO", "Saint Louis")
map.ancestry("MO", "St. Louis")
map.ancestry("MO", "St. Louis city")
map.ancestry("MO", c("St. Louis city", "St. Louis County")
)
map.ancestry("PA", "Philadelphia")
map.ancestry("PA", "New York")
map.ancestry("NY", "New York")
map.ancestry("CA", "Los Angeles")
map.ancestry("MD", "Baltimore")
map.ancestry("MD", "Baltimore City")
map.ancestry("MD", "Calvert")
?tracts
tracts <- tracts(state = "NY", cb=TRUE)
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("CA", "*")
counties <- "*" #give codes of counties here
state <- c("CA")
tracts <- tracts(state = state, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state,county = counties cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
#function outputting the map of ancestry by tract in given counties:
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state,county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("NY", "counties <- c(5, 47, 61, 81, 85)")
map.ancestry("NY", c(5, 47, 61, 81, 85))
map.ancestry <- function(state, counties) {
tracts <- tracts(state = state,county = counties, cb=TRUE)
geo<-geo.make(state = state, county = counties, tract="*")
ancestry=acs.fetch(geo=geo, table.name="People Reporting Ancestry",
col.names="pretty")
anc <- ancestry@estimate
anc <- data.frame(anc)
colnames(anc) <- lapply(colnames(anc),
function(x){strsplit(x, "...", fixed = TRUE)[[1]][2]})
colnames(anc) <- lapply(colnames(anc),
function(x) {gsub(".", "", x, fixed = TRUE)})
geoid <- paste0(str_pad(ancestry@geography$state, 2, "left", pad="0"),
str_pad(ancestry@geography$county, 3, "left", pad="0"),
str_pad(ancestry@geography$tract, 6, "left", pad="0"))
anc$geoid <- geoid
eth <- numeric(length(geoid))
names(anc)[103] <- "Trinidad&Tobagoian"
names(anc)[40] <- "French"
for (i in (1:length(geoid))){
eth[i] <- names(which.max(anc[i,-c(1,6,15, 35, 94, 104, 73,88, 106, 108, 109, 110)]))
} #I eliminate some groups that are vague or are further partitioned in smaller groups
anc$eth <- eth
final.df <- data.frame(anc$geoid, stat = as.factor(anc$eth))
merge<- geo_join(tracts, final.df, "GEOID", "anc.geoid")
pal <- colorFactor("Paired", NULL, n = 6)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -74.0059, lat = 40.7127, zoom = 13) %>%
addPolygons(data = merge,
fillColor = ~pal(stat), fillOpacity = .6,
color = "white", weight = 0.3,
popup = paste0(merge$stat), smoothFactor = 0.2) %>%
addLegend(pal = pal,
values = merge$stat,
position = "bottomright",
opacity = .7,
title = "Ancestry")
}
map.ancestry("NY", c(5, 47, 61, 81, 85))
